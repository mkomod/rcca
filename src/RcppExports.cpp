// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cca
Rcpp::List cca(const arma::mat X1, const arma::mat X2, const double l1, const double l2, const u_int niter, const double threshold, const bool verbose);
RcppExport SEXP _rcca_cca(SEXP X1SEXP, SEXP X2SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP niterSEXP, SEXP thresholdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const u_int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cca(X1, X2, l1, l2, niter, threshold, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cca_opt
arma::colvec cca_opt(const arma::mat X, arma::colvec w, const arma::colvec c, const double mu, const double lambda, const double l, const u_int niter, const double threshold);
RcppExport SEXP _rcca_cca_opt(SEXP XSEXP, SEXP wSEXP, SEXP cSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP lSEXP, SEXP niterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type l(lSEXP);
    Rcpp::traits::input_parameter< const u_int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cca_opt(X, w, c, mu, lambda, l, niter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cca_permutation_validation
double cca_permutation_validation(const arma::mat X1, const arma::mat X2, const double l1, const double l2, const u_int permutations, const u_int niter, const double threshold, const bool verbose);
RcppExport SEXP _rcca_cca_permutation_validation(SEXP X1SEXP, SEXP X2SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP permutationsSEXP, SEXP niterSEXP, SEXP thresholdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const u_int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< const u_int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cca_permutation_validation(X1, X2, l1, l2, permutations, niter, threshold, verbose));
    return rcpp_result_gen;
END_RCPP
}
// soft_threshold
arma::colvec soft_threshold(arma::colvec v, double d);
RcppExport SEXP _rcca_soft_threshold(SEXP vSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_threshold(v, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rcca_cca", (DL_FUNC) &_rcca_cca, 7},
    {"_rcca_cca_opt", (DL_FUNC) &_rcca_cca_opt, 8},
    {"_rcca_cca_permutation_validation", (DL_FUNC) &_rcca_cca_permutation_validation, 8},
    {"_rcca_soft_threshold", (DL_FUNC) &_rcca_soft_threshold, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rcca(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
